package gpj.myProxy;

import java.io.File;
import java.lang.reflect.Method;

import javax.tools.JavaCompiler;
import javax.tools.JavaCompiler.CompilationTask;
import javax.tools.StandardJavaFileManager;
import javax.tools.ToolProvider;

import org.apache.commons.io.FileUtils;

public class Proxy {

	public static Object newProxyInstance(Class<?> myInterface) throws Exception{
		String rt = "\r\n";
		String methodStr = "";
		for (Method m : myInterface.getMethods()) {
			methodStr +="	@Override"+rt+
			"	public void "+m.getName()+"() {"+rt+
			"		long startTime = System.currentTimeMillis();"+rt+
			"		System.out.println(\"汽车开始行使。。。\");"+rt+
			"		m."+m.getName()+"();"+rt+
			"		long endTime = System.currentTimeMillis();"+rt+
			"		System.out.println(\"汽车结束行使。。。 汽车行使时间：\""+rt+
			"				+(endTime-startTime)+\"毫秒\");"+rt+
			"	}";
		}
		String str=
		"package gpj.myProxy;"+rt+
		"public class $Proxy0 implements "+myInterface.getName()+ "{"+rt+
		"	public $Proxy0("+myInterface.getName()+" m) {"+rt+
		"		super();"+rt+
		"		this.m = m;"+rt+
		"	}"+rt+
		"	private "+myInterface.getName() +"m;"+rt+
		methodStr+rt+
		"}"+rt;
		
		//产生代理类的java文件
		String filename = System.getProperty("user.dir")+"\\$Proxy0.java";
		System.out.println(filename);
		
		File file = new File(filename);
		FileUtils.writeStringToFile(file, str);
		
		//编译
		//拿到编译器
		JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
		//文件管理者
		StandardJavaFileManager fileManager 
				= compiler.getStandardFileManager(null, null, null);
		
		//获取文件
		Iterable units= fileManager.getJavaFileObjects(filename);
		
		//编译任务
		//compiler.getTask(out, fileManager, diagnosticListener, options, classes, compilationUnits)
		 CompilationTask t=compiler.getTask(null, fileManager, null, null, null, units);
		 
		 //进行编译
		 t.call();
		 fileManager.close();
		return null;
	}
}
